$date
	Sun Aug  6 15:48:51 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module riscv_tb $end
$var reg 1 ! clk $end
$var reg 1 " rst $end
$scope module core $end
$var wire 1 ! clk $end
$var wire 1 # overflow $end
$var wire 1 " rst $end
$var wire 1 $ zero_ex $end
$var wire 1 % zero $end
$var wire 32 & writedata [31:0] $end
$var wire 32 ' sumB [31:0] $end
$var wire 32 ( sumA [31:0] $end
$var wire 5 ) rs2_id [4:0] $end
$var wire 5 * rs1_id [4:0] $end
$var wire 1 + regwrite_wb $end
$var wire 1 , regwrite_id $end
$var wire 1 - regwrite_ex $end
$var wire 1 . regwrite_cn $end
$var wire 1 / regwrite $end
$var wire 32 0 readdata_wb [31:0] $end
$var wire 32 1 readdata [31:0] $end
$var wire 5 2 rd_wb [4:0] $end
$var wire 5 3 rd_id [4:0] $end
$var wire 5 4 rd_ex [4:0] $end
$var wire 1 5 pcsrc $end
$var wire 32 6 pc_if [31:0] $end
$var wire 32 7 pc_id [31:0] $end
$var wire 32 8 pc [31:0] $end
$var wire 32 9 newpc [31:0] $end
$var wire 32 : mux_out [31:0] $end
$var wire 1 ; memwrite_id $end
$var wire 1 < memwrite_ex $end
$var wire 1 = memwrite_cn $end
$var wire 1 > memwrite $end
$var wire 1 ? memtoreg_wb $end
$var wire 1 @ memtoreg_id $end
$var wire 1 A memtoreg_ex $end
$var wire 1 B memtoreg $end
$var wire 1 C memread_id $end
$var wire 1 D memread_ex $end
$var wire 1 E memread $end
$var wire 32 F ins_if [31:0] $end
$var wire 32 G ins [31:0] $end
$var wire 32 H immediate_id [31:0] $end
$var wire 32 I immediate [31:0] $end
$var wire 1 J func7_id $end
$var wire 3 K func3_id [2:0] $end
$var wire 2 L forwardB [1:0] $end
$var wire 2 M forwardA [1:0] $end
$var wire 1 N flush_if $end
$var wire 1 O enable_pc $end
$var wire 1 P enable_if $end
$var wire 1 Q enable_control $end
$var wire 1 R branch_id $end
$var wire 1 S branch_ex $end
$var wire 1 T branch $end
$var wire 32 U b_id [31:0] $end
$var wire 32 V b_ex [31:0] $end
$var wire 32 W b [31:0] $end
$var wire 1 X alusrc_id $end
$var wire 1 Y alusrc $end
$var wire 32 Z alures_wb [31:0] $end
$var wire 32 [ alures_ex [31:0] $end
$var wire 32 \ alures [31:0] $end
$var wire 2 ] aluop_id [1:0] $end
$var wire 2 ^ aluop [1:0] $end
$var wire 4 _ aluctl [3:0] $end
$var wire 32 ` alu_in2 [31:0] $end
$var wire 32 a alu_in1 [31:0] $end
$var wire 32 b a_id [31:0] $end
$var wire 32 c a [31:0] $end
$scope module adder $end
$var wire 32 d in2 [31:0] $end
$var wire 32 e out [31:0] $end
$var wire 32 f in1 [31:0] $end
$upscope $end
$scope module adder2 $end
$var wire 32 g out [31:0] $end
$var wire 32 h in2 [31:0] $end
$var wire 32 i in1 [31:0] $end
$upscope $end
$scope module alu $end
$var wire 1 # overflow $end
$var wire 1 % zero $end
$var wire 32 j b [31:0] $end
$var wire 4 k aluctl [3:0] $end
$var wire 32 l a [31:0] $end
$var reg 32 m out [31:0] $end
$upscope $end
$scope module alucon $end
$var wire 1 J func7 $end
$var wire 3 n func3 [2:0] $end
$var wire 2 o aluop [1:0] $end
$var reg 4 p aluctl [3:0] $end
$upscope $end
$scope module bpred $end
$var wire 5 q rs1_if [4:0] $end
$var wire 5 r rs2_if [4:0] $end
$var wire 5 s rd_id [4:0] $end
$var wire 1 T branch $end
$var wire 32 t b [31:0] $end
$var wire 32 u a [31:0] $end
$var reg 1 N flush_if $end
$var reg 1 5 pc_src $end
$upscope $end
$scope module datamem $end
$var wire 1 ! clk $end
$var wire 32 v writedata [31:0] $end
$var wire 32 w readdata [31:0] $end
$var wire 1 < memwrite $end
$var wire 1 D memread $end
$var wire 32 x address [31:0] $end
$upscope $end
$scope module ex1 $end
$var wire 32 y alures [31:0] $end
$var wire 1 ! clk $end
$var wire 1 % zero $end
$var wire 1 , regwrite_id $end
$var wire 5 z rd_id [4:0] $end
$var wire 1 ; memwrite_id $end
$var wire 1 @ memtoreg_id $end
$var wire 1 C memread_id $end
$var wire 1 R branch_id $end
$var wire 32 { b_id [31:0] $end
$var reg 32 | alures_ex [31:0] $end
$var reg 32 } b_ex [31:0] $end
$var reg 1 S branch_ex $end
$var reg 1 D memread_ex $end
$var reg 1 A memtoreg_ex $end
$var reg 1 < memwrite_ex $end
$var reg 5 ~ rd_ex [4:0] $end
$var reg 1 - regwrite_ex $end
$var reg 1 $ zero_ex $end
$upscope $end
$scope module fwdAmux $end
$var wire 32 !" in2 [31:0] $end
$var wire 2 "" s [1:0] $end
$var wire 32 #" out [31:0] $end
$var wire 32 $" in3 [31:0] $end
$var wire 32 %" in1 [31:0] $end
$upscope $end
$scope module fwdBmux $end
$var wire 32 &" in2 [31:0] $end
$var wire 2 '" s [1:0] $end
$var wire 32 (" out [31:0] $end
$var wire 32 )" in3 [31:0] $end
$var wire 32 *" in1 [31:0] $end
$upscope $end
$scope module fwdunit $end
$var wire 5 +" rd_ex [4:0] $end
$var wire 1 - regwrite_ex $end
$var wire 5 ," rs2_id [4:0] $end
$var wire 5 -" rs1_id [4:0] $end
$var wire 1 + regwrite_wb $end
$var wire 5 ." rd_wb [4:0] $end
$var reg 2 /" forwardA [1:0] $end
$var reg 2 0" forwardB [1:0] $end
$upscope $end
$scope module hdetect $end
$var wire 5 1" rs1_if [4:0] $end
$var wire 5 2" rs2_if [4:0] $end
$var wire 5 3" rd_id [4:0] $end
$var wire 1 C memread_id $end
$var wire 1 T branch $end
$var reg 1 Q enable_control $end
$var reg 1 P enable_if $end
$var reg 1 O enable_pc $end
$upscope $end
$scope module id1 $end
$var wire 1 ! clk $end
$var wire 3 4" func3 [2:0] $end
$var wire 1 5" func7 $end
$var wire 5 6" rd [4:0] $end
$var wire 5 7" rs1_if [4:0] $end
$var wire 5 8" rs2_if [4:0] $end
$var wire 1 . regwrite_if $end
$var wire 32 9" pc_if [31:0] $end
$var wire 1 = memwrite_if $end
$var wire 1 B memtoreg_if $end
$var wire 1 E memread_if $end
$var wire 32 :" immediate [31:0] $end
$var wire 1 T branch_if $end
$var wire 32 ;" b [31:0] $end
$var wire 1 Y alusrc_if $end
$var wire 2 <" aluop_if [1:0] $end
$var wire 32 =" a [31:0] $end
$var reg 32 >" a_id [31:0] $end
$var reg 2 ?" aluop_id [1:0] $end
$var reg 1 X alusrc_id $end
$var reg 32 @" b_id [31:0] $end
$var reg 1 R branch_id $end
$var reg 3 A" func3_id [2:0] $end
$var reg 1 J func7_id $end
$var reg 32 B" immediate_id [31:0] $end
$var reg 1 C memread_id $end
$var reg 1 @ memtoreg_id $end
$var reg 1 ; memwrite_id $end
$var reg 32 C" pc_id [31:0] $end
$var reg 5 D" rd_id [4:0] $end
$var reg 1 , regwrite_id $end
$var reg 5 E" rs1_id [4:0] $end
$var reg 5 F" rs2_id [4:0] $end
$upscope $end
$scope module if1 $end
$var wire 1 ! clk $end
$var wire 1 P enable_if $end
$var wire 1 N flush_if $end
$var wire 32 G" pc [31:0] $end
$var wire 32 H" ins [31:0] $end
$var reg 32 I" ins_if [31:0] $end
$var reg 32 J" pc_if [31:0] $end
$upscope $end
$scope module immgen $end
$var wire 32 K" instruction [31:0] $end
$var parameter 7 L" I $end
$var parameter 7 M" I_LD $end
$var parameter 7 N" S $end
$var parameter 7 O" SB $end
$var reg 32 P" result [31:0] $end
$upscope $end
$scope module insmem $end
$var wire 32 Q" pc [31:0] $end
$var wire 32 R" instruction [31:0] $end
$upscope $end
$scope module maincon $end
$var wire 7 S" opcode [6:0] $end
$var parameter 7 T" I $end
$var parameter 7 U" I_LD $end
$var parameter 7 V" R $end
$var parameter 7 W" S $end
$var parameter 7 X" SB $end
$var reg 2 Y" aluop [1:0] $end
$var reg 1 Y alusrc $end
$var reg 1 T branch $end
$var reg 1 E memread $end
$var reg 1 B memtoreg $end
$var reg 1 > memwrite $end
$var reg 1 / regwrite $end
$upscope $end
$scope module mux1 $end
$var wire 32 Z" in1 [31:0] $end
$var wire 32 [" in2 [31:0] $end
$var wire 1 5 s $end
$var wire 32 \" out [31:0] $end
$upscope $end
$scope module mux2 $end
$var wire 32 ]" in1 [31:0] $end
$var wire 32 ^" in2 [31:0] $end
$var wire 1 X s $end
$var wire 32 _" out [31:0] $end
$upscope $end
$scope module mux3 $end
$var wire 1 ? s $end
$var wire 32 `" out [31:0] $end
$var wire 32 a" in2 [31:0] $end
$var wire 32 b" in1 [31:0] $end
$upscope $end
$scope module mux4 $end
$var wire 1 c" in1 $end
$var wire 1 / in2 $end
$var wire 1 Q s $end
$var wire 1 . out $end
$upscope $end
$scope module mux5 $end
$var wire 1 d" in1 $end
$var wire 1 > in2 $end
$var wire 1 Q s $end
$var wire 1 = out $end
$upscope $end
$scope module pcmod $end
$var wire 1 ! clk $end
$var wire 1 O enable $end
$var wire 32 e" in [31:0] $end
$var wire 1 " rst $end
$var reg 32 f" out [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 g" rs1 [4:0] $end
$var wire 5 h" rs2 [4:0] $end
$var wire 32 i" writedata [31:0] $end
$var wire 1 j" x1 $end
$var wire 1 k" x2 $end
$var wire 1 + regwrite $end
$var wire 32 l" readdata2 [31:0] $end
$var wire 32 m" readdata1 [31:0] $end
$var wire 5 n" rd [4:0] $end
$upscope $end
$scope module wb1 $end
$var wire 32 o" alures_ex [31:0] $end
$var wire 1 ! clk $end
$var wire 1 A memtoreg_ex $end
$var wire 5 p" rd_ex [4:0] $end
$var wire 32 q" readdata [31:0] $end
$var wire 1 - regwrite_ex $end
$var reg 32 r" alures_wb [31:0] $end
$var reg 1 ? memtoreg_wb $end
$var reg 5 s" rd_wb [4:0] $end
$var reg 32 t" readdata_wb [31:0] $end
$var reg 1 + regwrite_wb $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1100011 X"
b100011 W"
b110011 V"
b11 U"
b10011 T"
b1100011 O"
b100011 N"
b11 M"
b10011 L"
$end
#0
$dumpvars
b0 t"
b0 s"
b0 r"
b0 q"
b0 p"
b0 o"
b0 n"
b0 m"
b0 l"
0k"
0j"
b0 i"
b0 h"
b0 g"
bx f"
bx e"
0d"
0c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
bx \"
b0 ["
bx Z"
b0 Y"
b0 S"
bx R"
bx Q"
b0 P"
b0 K"
b0 J"
b0 I"
bx H"
bx G"
b0 F"
b0 E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
05"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b10 p
b0 o
b0 n
b0 m
b0 l
b10 k
b0 j
b0 i
b0 h
b0 g
bx f
bx e
b100 d
b0 c
b0 b
b0 a
b0 `
b10 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
0Y
0X
b0 W
b0 V
b0 U
0T
0S
0R
1Q
1P
1O
0N
b0 M
b0 L
b0 K
0J
b0 I
b0 H
bx G
b0 F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
b0 :
bx 9
bx 8
b0 7
b0 6
05
b0 4
b0 3
b0 2
b0 1
b0 0
0/
0.
0-
0,
0+
b0 *
b0 )
bx (
b0 '
b0 &
1%
0$
z#
x"
0!
$end
#1
bx W
bx t
bx ;"
bx l"
bx c
bx u
bx ="
bx m"
b100 9
b100 \"
b100 e"
bx 8"
bx 7"
bx 6"
bx 4"
x5"
bx S"
bx r
bx q
bx h"
bx g"
bx 2"
bx 1"
b10011 G
b10011 H"
b10011 R"
b100 (
b100 e
b100 Z"
b0 8
b0 f
b0 G"
b0 Q"
b0 f"
bx F
bx I"
bx K"
bx '
bx g
bx ["
bx 6
bx h
bx 9"
bx J"
1$
1"
1!
#2
0!
#3
1.
x%
bx \
bx m
bx y
1Y
1/
bx `
bx j
bx ("
bx a
bx l
bx #"
b0 W
b0 t
b0 ;"
b0 l"
b0 c
b0 u
b0 ="
b0 m"
bx :
bx *"
bx _"
b0 8"
b0 7"
b0 6"
b0 4"
05"
b10011 S"
b0 r
b0 q
b0 h"
b0 g"
b0 2"
b0 1"
b1000 9
b1000 \"
b1000 e"
bx )
bx ,"
bx F"
bx *
bx -"
bx E"
xJ
bx K
bx n
bx A"
bx 3
bx s
bx z
bx 3"
bx D"
bx U
bx {
bx @"
bx ]"
bx b
bx %"
bx >"
bx 7
bx C"
b10011 F
b10011 I"
b10011 K"
b0 '
b0 g
b0 ["
b0 6
b0 h
b0 9"
b0 J"
b1000 (
b1000 e
b1000 Z"
b100 8
b100 f
b100 G"
b100 Q"
b100 f"
1!
0"
#4
0!
#5
1%
b0 \
b0 m
b0 y
b0 `
b0 j
b0 ("
b0 a
b0 l
b0 #"
b1100 9
b1100 \"
b1100 e"
b0 :
b0 *"
b0 _"
b1100 (
b1100 e
b1100 Z"
b1000 8
b1000 f
b1000 G"
b1000 Q"
b1000 f"
b100 '
b100 g
b100 ["
b100 6
b100 h
b100 9"
b100 J"
b0 )
b0 ,"
b0 F"
b0 *
b0 -"
b0 E"
1,
0J
b0 K
b0 n
b0 A"
b0 3
b0 s
b0 z
b0 3"
b0 D"
b0 U
b0 {
b0 @"
b0 ]"
b0 b
b0 %"
b0 >"
b0 7
b0 C"
1X
bx 4
bx ~
bx +"
bx p"
bx V
bx v
bx }
bx [
bx x
bx |
bx !"
bx &"
bx o"
x$
1!
#6
0!
#7
bx &
bx $"
bx )"
bx `"
bx i"
b10000 9
b10000 \"
b10000 e"
bx 2
bx ."
bx n"
bx s"
bx Z
bx b"
bx r"
1-
b0 4
b0 ~
b0 +"
b0 p"
b0 V
b0 v
b0 }
b0 [
b0 x
b0 |
b0 !"
b0 &"
b0 o"
1$
b100 7
b100 C"
b1000 '
b1000 g
b1000 ["
b1000 6
b1000 h
b1000 9"
b1000 J"
b10000 (
b10000 e
b10000 Z"
b1100 8
b1100 f
b1100 G"
b1100 Q"
b1100 f"
1!
#8
0!
#9
b10100 9
b10100 \"
b10100 e"
b0 &
b0 $"
b0 )"
b0 `"
b0 i"
b100000000010100010011 G
b100000000010100010011 H"
b100000000010100010011 R"
b10100 (
b10100 e
b10100 Z"
b10000 8
b10000 f
b10000 G"
b10000 Q"
b10000 f"
b1100 '
b1100 g
b1100 ["
b1100 6
b1100 h
b1100 9"
b1100 J"
b1000 7
b1000 C"
1+
b0 2
b0 ."
b0 n"
b0 s"
b0 Z
b0 b"
b0 r"
1!
#10
0!
#11
b1 I
b1 i
b1 :"
b1 P"
bx W
bx t
bx ;"
bx l"
b1 8"
b1010 6"
b1 r
b1 h"
b1 2"
b11000 9
b11000 \"
b11000 e"
b1100 7
b1100 C"
b100000000010100010011 F
b100000000010100010011 I"
b100000000010100010011 K"
b10001 '
b10001 g
b10001 ["
b10000 6
b10000 h
b10000 9"
b10000 J"
b1001010000011000010011 G
b1001010000011000010011 H"
b1001010000011000010011 R"
b11000 (
b11000 e
b11000 Z"
b10100 8
b10100 f
b10100 G"
b10100 Q"
b10100 f"
1!
#12
0!
#13
0%
b1 \
b1 m
b1 y
b10 I
b10 i
b10 :"
b10 P"
b1 `
b1 j
b1 ("
bx c
bx u
bx ="
bx m"
b11100 9
b11100 \"
b11100 e"
b10 8"
b1010 7"
b1100 6"
b10 r
b1010 q
b10 h"
b1010 g"
b10 2"
b1010 1"
b1 :
b1 *"
b1 _"
b101010000010110010011 G
b101010000010110010011 H"
b101010000010110010011 R"
b11100 (
b11100 e
b11100 Z"
b11000 8
b11000 f
b11000 G"
b11000 Q"
b11000 f"
b1001010000011000010011 F
b1001010000011000010011 I"
b1001010000011000010011 K"
b10110 '
b10110 g
b10110 ["
b10100 6
b10100 h
b10100 9"
b10100 J"
b1 )
b1 ,"
b1 F"
b1010 3
b1010 s
b1010 z
b1010 3"
b1010 D"
b1 H
b1 B"
b1 ^"
bx U
bx {
bx @"
bx ]"
b10000 7
b10000 C"
1!
#14
0!
#15
0%
b11 \
b11 m
b11 y
b1 M
b1 ""
b1 /"
b1 I
b1 i
b1 :"
b1 P"
b10 `
b10 j
b10 ("
b1 a
b1 l
b1 #"
b10 :
b10 *"
b10 _"
b1 8"
b1011 6"
b1 r
b1 h"
b1 2"
b100000 9
b100000 \"
b100000 e"
b1010 4
b1010 ~
b1010 +"
b1010 p"
bx V
bx v
bx }
b1 [
b1 x
b1 |
b1 !"
b1 &"
b1 o"
0$
b10 )
b10 ,"
b10 F"
b1010 *
b1010 -"
b1010 E"
b1100 3
b1100 s
b1100 z
b1100 3"
b1100 D"
b10 H
b10 B"
b10 ^"
bx b
bx %"
bx >"
b10100 7
b10100 C"
b101010000010110010011 F
b101010000010110010011 I"
b101010000010110010011 K"
b11001 '
b11001 g
b11001 ["
b11000 6
b11000 h
b11000 9"
b11000 J"
b10101101100000001001100011 G
b10101101100000001001100011 H"
b10101101100000001001100011 R"
b100000 (
b100000 e
b100000 Z"
b11100 8
b11100 f
b11100 G"
b11100 Q"
b11100 f"
1!
#16
0!
#17
15
1N
0P
0O
0Q
0.
b10 \
b10 m
b10 y
b1 ^
b1 <"
b1 Y"
0Y
0/
1T
b100100 I
b100100 i
b100100 :"
b100100 P"
b10 M
b10 ""
b10 /"
b1 `
b1 j
b1 ("
bx c
bx u
bx ="
bx m"
b1 a
b1 l
b1 #"
0j"
b1000000 9
b1000000 \"
b1000000 e"
b1011 8"
b1100 7"
b100 6"
b1100011 S"
b1011 r
b1100 q
b1011 h"
b1100 g"
b1011 2"
b1100 1"
b1 :
b1 *"
b1 _"
b1 &
b1 $"
b1 )"
b1 `"
b1 i"
b101000000010000000100011 G
b101000000010000000100011 H"
b101000000010000000100011 R"
b100100 (
b100100 e
b100100 Z"
b100000 8
b100000 f
b100000 G"
b100000 Q"
b100000 f"
b10101101100000001001100011 F
b10101101100000001001100011 I"
b10101101100000001001100011 K"
b1000000 '
b1000000 g
b1000000 ["
b11100 6
b11100 h
b11100 9"
b11100 J"
b1 )
b1 ,"
b1 F"
b1011 3
b1011 s
b1011 z
b1011 3"
b1011 D"
b1 H
b1 B"
b1 ^"
b11000 7
b11000 C"
b1100 4
b1100 ~
b1100 +"
b1100 p"
b11 [
b11 x
b11 |
b11 !"
b11 &"
b11 o"
b1010 2
b1010 ."
b1010 n"
b1010 s"
b1 Z
b1 b"
b1 r"
1!
#18
0!
#19
b0xx00x00 9
b0xx00x00 \"
b0xx00x00 e"
x5
xN
0%
b1 \
b1 m
b1 y
b1 L
b1 '"
b1 0"
1P
1O
1Q
b110 _
b110 k
b110 p
b11 c
b11 u
b11 ="
b11 m"
b11 a
b11 l
b11 #"
b10 `
b10 j
b10 ("
1j"
b11 &
b11 $"
b11 )"
b11 `"
b11 i"
bx :
bx *"
bx _"
b1100 2
b1100 ."
b1100 n"
b1100 s"
b11 Z
b11 b"
b11 r"
b1011 4
b1011 ~
b1011 +"
b1011 p"
b10 [
b10 x
b10 |
b10 !"
b10 &"
b10 o"
b1011 )
b1011 ,"
b1011 F"
b1100 *
b1100 -"
b1100 E"
0,
b100 3
b100 s
b100 z
b100 3"
b100 D"
b100100 H
b100100 B"
b100100 ^"
b11100 7
b11100 C"
b1 ]
b1 o
b1 ?"
0X
1R
1!
#20
0!
#21
b1 \
b1 m
b1 y
05
0N
b0 ^
b0 <"
b0 Y"
0T
b11100 '
b11100 g
b11100 ["
b0 I
b0 i
b0 :"
b0 P"
b10 L
b10 '"
b10 0"
b0 M
b0 ""
b0 /"
b11 a
b11 l
b11 #"
b0 W
b0 t
b0 ;"
b0 l"
b10 `
b10 j
b10 ("
0k"
0j"
b0 c
b0 u
b0 ="
b0 m"
bx 9
bx \"
bx e"
b0 8"
b0 7"
b0 6"
b0 S"
b0 r
b0 q
b0 h"
b0 g"
b0 2"
b0 1"
b10 &
b10 $"
b10 )"
b10 `"
b10 i"
bx G
bx H"
bx R"
bx (
bx e
bx Z"
b0xx00x00 8
b0xx00x00 f
b0xx00x00 G"
b0xx00x00 Q"
b0xx00x00 f"
b0 F
b0 I"
b0 K"
b11 b
b11 %"
b11 >"
0-
b100 4
b100 ~
b100 +"
b100 p"
b1 [
b1 x
b1 |
b1 !"
b1 &"
b1 o"
1S
b1011 2
b1011 ."
b1011 n"
b1011 s"
b10 Z
b10 b"
b10 r"
1!
#22
0!
#23
1%
b0 \
b0 m
b0 y
b0 L
b0 '"
b0 0"
b10 _
b10 k
b10 p
b0 `
b0 j
b0 ("
b0 a
b0 l
b0 #"
bx W
bx t
bx ;"
bx l"
bx c
bx u
bx ="
bx m"
b1 &
b1 $"
b1 )"
b1 `"
b1 i"
b0 :
b0 *"
b0 _"
bx 8"
bx 7"
bx 6"
bx 4"
x5"
bx S"
bx r
bx q
bx h"
bx g"
bx 2"
bx 1"
0+
b100 2
b100 ."
b100 n"
b100 s"
b1 Z
b1 b"
b1 r"
b0 )
b0 ,"
b0 F"
b0 *
b0 -"
b0 E"
b0 3
b0 s
b0 z
b0 3"
b0 D"
b0 H
b0 B"
b0 ^"
b0 U
b0 {
b0 @"
b0 ]"
b0 b
b0 %"
b0 >"
b0 ]
b0 o
b0 ?"
0R
bx F
bx I"
bx K"
bx '
bx g
bx ["
b0xx00x00 6
b0xx00x00 h
b0xx00x00 9"
b0xx00x00 J"
bx 8
bx f
bx G"
bx Q"
bx f"
1!
#24
0!
#25
x%
bx \
bx m
bx y
bx `
bx j
bx ("
bx a
bx l
bx #"
bx :
bx *"
bx _"
bx 6
bx h
bx 9"
bx J"
bx )
bx ,"
bx F"
bx *
bx -"
bx E"
xJ
bx K
bx n
bx A"
bx 3
bx s
bx z
bx 3"
bx D"
bx U
bx {
bx @"
bx ]"
bx b
bx %"
bx >"
b0xx00x00 7
b0xx00x00 C"
b0 4
b0 ~
b0 +"
b0 p"
b0 V
b0 v
b0 }
b0 [
b0 x
b0 |
b0 !"
b0 &"
b0 o"
0S
1$
1!
#26
0!
#27
b0 &
b0 $"
b0 )"
b0 `"
b0 i"
b0 2
b0 ."
b0 n"
b0 s"
b0 Z
b0 b"
b0 r"
bx 4
bx ~
bx +"
bx p"
bx V
bx v
bx }
bx [
bx x
bx |
bx !"
bx &"
bx o"
x$
bx 7
bx C"
1!
#28
0!
#29
bx &
bx $"
bx )"
bx `"
bx i"
bx 2
bx ."
bx n"
bx s"
bx Z
bx b"
bx r"
1!
#30
0!
#31
1!
#32
0!
#33
1!
#34
0!
#35
1!
#36
0!
#37
1!
#38
0!
#39
1!
#40
0!
#41
1!
#42
0!
#43
1!
#44
0!
#45
1!
#46
0!
#47
1!
#48
0!
#49
1!
#50
0!
#51
1!
#52
0!
#53
1!
#54
0!
#55
1!
#56
0!
#57
1!
#58
0!
#59
1!
#60
0!
#61
1!
#62
0!
#63
1!
#64
0!
#65
1!
#66
0!
#67
1!
#68
0!
#69
1!
#70
0!
#71
1!
#72
0!
#73
1!
#74
0!
#75
1!
#76
0!
#77
1!
#78
0!
#79
1!
#80
0!
#81
1!
#82
0!
#83
1!
#84
0!
#85
1!
#86
0!
#87
1!
#88
0!
#89
1!
#90
0!
#91
1!
#92
0!
#93
1!
#94
0!
#95
1!
#96
0!
#97
1!
#98
0!
#99
1!
#100
0!
#101
1!
#102
0!
#103
1!
#104
0!
#105
1!
#106
0!
#107
1!
#108
0!
#109
1!
#110
0!
#111
1!
#112
0!
#113
1!
#114
0!
#115
1!
#116
0!
#117
1!
#118
0!
#119
1!
#120
0!
#121
1!
#122
0!
#123
1!
#124
0!
#125
1!
#126
0!
#127
1!
#128
0!
#129
1!
#130
0!
#131
1!
#132
0!
#133
1!
#134
0!
#135
1!
#136
0!
#137
1!
#138
0!
#139
1!
#140
0!
#141
1!
#142
0!
#143
1!
#144
0!
#145
1!
#146
0!
#147
1!
#148
0!
#149
1!
#150
0!
#151
1!
#152
0!
#153
1!
